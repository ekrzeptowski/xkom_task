{"version":3,"sources":["features/reservation/Seat.module.scss","features/reservation/reservationSlice.js","features/reservation/Main.js","features/reservation/Seat.js","features/reservation/SeatSelection.js","features/reservation/getRandom.js","features/reservation/Summary.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","reservationSlice","createSlice","name","initialState","selected","seatsNumber","seatsTogether","reducers","saveSettings","state","action","payload","addSelected","removeSelected","filter","val","id","actions","getReservation","reservation","Main","dispatch","useDispatch","history","useHistory","useSelector","useState","setSeatsNumber","setSeatsTogether","Container","className","Form","onSubmit","event","preventDefault","push","Group","as","Row","controlId","Label","column","Col","Control","value","onChange","target","required","type","min","Check","custom","checked","label","Button","block","variant","check","seat","some","reserved","cords","x","y","Seat","onClick","setChecked","useEffect","onCheck","length","styles","space","legend","SeatSelection","touched","setTouched","useFetch","process","isLoading","data","console","log","maxX","seats","Math","max","map","maxY","Array","forEach","random","useMemo","availableSeats","row","seatIndex","temp","index","parseInt","floor","sort","slice","getRandom","noGutters","sm","Summary","App","path","store","configureStore","reducer","reservationReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,MAAQ,oBAAoB,KAAO,mBAAmB,SAAW,uBAAuB,SAAW,uBAAuB,OAAS,uB,+KCOxIC,EAAmBC,YAAY,CAC1CC,KAAM,cACNC,aARmB,CACnBC,SAAU,GACVC,YAAa,EACbC,eAAe,GAMfC,SAAU,CAERC,aAAc,SAACC,EAAOC,GACpBD,EAAML,SAAW,GACjBK,EAAMJ,YAAcK,EAAOC,QAAQN,YACnCI,EAAMH,cAAgBI,EAAOC,QAAQL,eAEvCM,YAAa,SAACH,EAAOC,GACnBD,EAAML,SAAN,sBAAqBK,EAAML,UAA3B,CAAqCM,EAAOC,WAE9CE,eAAgB,SAACJ,EAAOC,GACtBD,EAAML,SAAWK,EAAML,SAASU,QAC9B,SAACC,GAAD,OAASA,EAAIC,KAAON,EAAOC,QAAQK,U,EAQzChB,EAAiBiB,QADJT,E,EAAAA,aAAcI,E,EAAAA,YAAaC,E,EAAAA,eAG7BK,EAAiB,SAACT,GAAD,OAAWA,EAAMU,aAEhCnB,IAAf,Q,OC3BO,SAASoB,IACd,IAAMC,EAAWC,cACXC,EAAUC,cAEVL,EAAcM,YAAYP,GAJX,EAMiBQ,mBAASP,EAAYd,aANtC,mBAMdA,EANc,KAMDsB,EANC,OAOqBD,mBAASP,EAAYb,eAP1C,mBAOdA,EAPc,KAOCsB,EAPD,KAqBrB,OACE,cAACC,EAAA,EAAD,CACEC,UAAS,8DADX,SAGE,eAACC,EAAA,EAAD,CAAMC,SAZO,SAACC,GAChBA,EAAMC,iBACF7B,IACFgB,EAASb,EAAa,CAAEH,cAAaC,mBACrCiB,EAAQY,KAAK,kBAQb,UACE,eAACJ,EAAA,EAAKK,MAAN,CAAYC,GAAIN,IAAKO,IAAKC,UAAU,cAApC,UACE,cAACR,EAAA,EAAKS,MAAN,CAAYC,QAAM,EAAlB,4BACA,cAACC,EAAA,EAAD,UACE,cAACX,EAAA,EAAKY,QAAN,CACEC,MAAOvC,EACPwC,SAtBiB,SAACZ,GAAD,OAAWN,EAAeM,EAAMa,OAAOF,QAuBxDG,UAAQ,EACRC,KAAK,SACLC,IAAI,WAIV,cAAClB,EAAA,EAAKmB,MAAN,CACEC,QAAM,EACNjD,KAAK,aACL4B,UAAU,OACVd,GAAG,aACHoC,QAAS9C,EACTuC,SAlCuB,SAACZ,GAAD,OAC7BL,EAAiBK,EAAMa,OAAOM,UAkCxBC,MAAM,gDAER,cAACC,EAAA,EAAD,CAAQC,OAAK,EAACP,KAAK,SAASQ,QAAQ,kBAApC,kC,kDC7CFC,EAAQ,SAACtC,EAAauC,GAAd,OACZvC,EAAYf,SAASuD,MACnB,SAACC,GAAD,mBACE,UAAAF,EAAKG,aAAL,eAAYC,MAAZ,UAAkBF,EAASC,aAA3B,aAAkB,EAAgBC,KAAK,UAAAJ,EAAKG,aAAL,eAAYE,MAAZ,UAAkBH,EAASC,aAA3B,aAAkB,EAAgBE,OAGlEC,EAAO,SAAC,GAAiC,IAA/BN,EAA8B,EAA9BA,KAAMtD,EAAwB,EAAxBA,SAAU6D,EAAc,EAAdA,QAC/B5C,EAAWC,cACXH,EAAcM,YAAYP,GAFmB,EAGrBQ,mBAASgC,GAAQD,EAAMtC,EAAauC,IAHf,mBAG5CN,EAH4C,KAGnCc,EAHmC,KAKnDC,qBAAU,WACRD,EAAWR,GAAQD,EAAMtC,EAAauC,MACrC,CAACvC,EAAauC,IAEjB,IAAMU,EAAU,WACdH,IACKb,GASHc,GAAW,GACX7C,EAASR,EAAe6C,KATpBvC,EAAYf,SAASiE,OAASlD,EAAYd,aAC5C6D,GAAW,GACX7C,EAAST,EAAY8C,MAEnBrC,EAASR,EAAeM,EAAYf,SAAS,KAC7CiB,EAAST,EAAY8C,MAQ7B,OACE,qBAAK5B,UAAWwC,IAAOC,MAAvB,SACGb,GACC,qBACE5B,UAAS,UAAKwC,IAAOZ,KAAZ,YAAoBA,EAAKE,SAAWU,IAAOV,SAAW,GAAtD,YACPxD,GAAYgD,EAAUkB,IAAOlE,SAAW,GADjC,YAEJsD,EAAK1C,GAAqB,GAAhBsD,IAAOE,QACtBP,QAAS,kBAAOP,EAAKE,UAAYF,EAAK1C,IAAMoD,UCtC/C,SAASK,IAAiB,IAAD,IACxBlD,EAAUC,cACVH,EAAWC,cAEXH,EAAcM,YAAYP,GAJF,EAKAQ,oBAAS,GALT,mBAKvBgD,EALuB,KAKdC,EALc,OAOFC,IAGtBC,yBAHEC,EAPsB,EAOtBA,UAAWC,EAPW,EAOXA,KAKnBC,QAAQC,IAAIF,GAEZ,IAAMG,GAAW,OAAJH,QAAI,IAAJA,OAAA,EAAAA,EAAMI,QAASC,KAAKC,IAAL,MAAAD,KAAI,mBAAQL,QAAR,IAAQA,GAAR,UAAQA,EAAMI,aAAd,aAAQ,EAAaG,KAAI,SAAC5B,GAAD,OAAUA,EAAKG,MAAMC,OACxEyB,GAAW,OAAJR,QAAI,IAAJA,OAAA,EAAAA,EAAMI,QAASC,KAAKC,IAAL,MAAAD,KAAI,mBAAQL,QAAR,IAAQA,GAAR,UAAQA,EAAMI,aAAd,aAAQ,EAAaG,KAAI,SAAC5B,GAAD,OAAUA,EAAKG,MAAME,OAGxEoB,GACA,OAAJJ,QAAI,IAAJA,OAAA,EAAAA,EAAMI,QACN,YAAIK,MAAMN,EAAO,IAAII,KAAI,kBAAM,YAAIE,MAAMD,EAAO,IAAID,KAAI,kBAAM,YAG5D,OAAJP,QAAI,IAAJA,OAAA,EAAAA,EAAMI,QACJJ,EAAKI,MAAMM,SAAQ,SAAC/B,GAClByB,EAAMzB,EAAKG,MAAMC,GAAGJ,EAAKG,MAAME,GAAKL,KAIxC,IAAMgC,EAASC,mBACb,kBCxCG,SAAmBR,EAAOhE,EAAab,GAC5C,GAAK6E,EAAL,CACA,IAAIS,EAAiB,GA0BrB,GAzBAT,EAAMM,SAAQ,SAACI,GACbA,EAAIJ,SAAQ,SAAC/B,EAAMoC,GACjB,GAAKpC,EAIL,GAAKpD,EAEE,CAGL,IAFA,IAAIyF,EAAO,GAEFC,EAAQ,EAAGA,EAAQ7E,EAAYd,YAAa2F,IAAS,CAAC,IAAD,KACxD,UAAAH,EAAIC,EAAYE,UAAhB,eAAwBhF,OAAM,UAAC6E,EAAIC,EAAYE,UAAjB,aAAC,EAAwBpC,UACzDmC,EAAK5D,KAAK0D,EAAIC,EAAYE,IAE1BD,EAAO,GAIXA,EAAK1B,SAAW4B,SAAS9E,EAAYd,YAAa,KAChDuF,EAAezD,KAAK4D,QAbtBH,EAAezD,KAAKuB,SAkBrBpD,EAIE,CACL,IAAMoF,EAASN,KAAKc,MAAMd,KAAKM,SAAWE,EAAevB,QACzD,OAAOuB,EAAeF,GALtB,OAAOE,EACJO,MAAK,kBAAMf,KAAKM,SAAWN,KAAKM,YAChCU,MAAM,EAAGH,SAAS9E,EAAYd,YAAa,MDSxCgG,CAAUlB,EAAOhE,EAAaA,EAAYb,iBAChD,CAAC6E,EAAOhE,IAIVgD,qBAAU,WACwB,IAAhChD,EAAYf,SAASiE,SAClBK,IACK,OAANgB,QAAM,IAANA,OAAA,EAAAA,EAAQrB,QAAS,GACjBqB,EAAOD,SAAQ,SAAC/B,GAAD,OAAUrC,EAAST,EAAY8C,SAC/C,CAACrC,EAAUqE,EAAQvE,EAAYf,SAASiE,OAAQK,IAOnD,OAAII,EAEA,cAACjD,EAAA,EAAD,CACEC,UAAS,8DADX,SAGE,uFAMJ,mCACE,eAACQ,EAAA,EAAD,CAAKR,UAAU,cAAf,UACGqD,GACCA,EAAMG,KAAI,SAACO,EAAK9B,GAAN,OACR,cAACzB,EAAA,EAAD,CAAKgE,WAAS,EAASxE,UAAU,cAAjC,SACG+D,EAAIP,KAAI,SAAC5B,EAAMI,GAAP,OACP,cAAC,EAAD,CAEEJ,KAAMA,EACNO,QAAS,kBAAMU,GAAW,KAH5B,UACUb,EADV,aACgBC,QAHAA,MAUxB,eAACzB,EAAA,EAAD,CAAKgE,WAAS,EAACxE,UAAU,gCAAzB,UACE,eAACY,EAAA,EAAD,CAAK6D,GAAG,OAAOzE,UAAU,qBAAzB,UACE,sBAAKA,UAAU,iCAAf,UACE,cAAC,EAAD,CAAM4B,KAAM,KACZ,4DAEF,sBAAK5B,UAAU,iCAAf,UACE,cAAC,EAAD,CAAM4B,KAAM,CAAEE,UAAU,KACxB,4DAEF,sBAAK9B,UAAU,iCAAf,UACE,cAAC,EAAD,CAAM4B,KAAM,GAAItD,UAAQ,IACxB,0DAGJ,cAACsC,EAAA,EAAD,UACE,cAACY,EAAA,EAAD,CACEjB,GAAG,QACHW,KAAK,SACLJ,MAAM,WACNY,QAAQ,kBACRS,QAAS,WAlDnB9C,EAAYf,SAASiE,SAAW4B,SAAS9E,EAAYd,YAAa,KAChEkB,EAAQY,KAAK,yBEhDZ,SAASqE,IACd,IAAMrF,EAAcM,YAAYP,GAEhC,OACE,eAACW,EAAA,EAAD,WACE,oBAAIC,UAAU,sBAAd,8DAGA,uBACA,oBAAIA,UAAU,KAAd,yCACA,oBAAIA,UAAU,gCAAd,SACGX,EAAYf,SAASkF,KAAI,SAAC5B,GAAD,OACxB,6CACSA,EAAKG,MAAMC,EADpB,cACkCJ,EAAKG,MAAME,EAD7C,OACoDL,EAAK1C,GADzD,MAAS0C,EAAK1C,SAKlB,mBAAGc,UAAU,mBAAb,sG,MCIS2E,MAlBf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,eAAZ,SACE,cAACjC,EAAD,MAEF,cAAC,IAAD,CAAOiC,KAAK,WAAZ,SACE,cAACF,EAAD,MAEF,cAAC,IAAD,CAAOE,KAAK,IAAZ,SACE,cAACtF,EAAD,YCjBGuF,EAAQC,YAAe,CAClCC,QAAS,CACP1F,YAAa2F,KCOGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.e1dd371f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"space\":\"Seat_space__3RthE\",\"seat\":\"Seat_seat__L6rL3\",\"reserved\":\"Seat_reserved__3CsKd\",\"selected\":\"Seat_selected__2HjUd\",\"legend\":\"Seat_legend__2z_u-\"};","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  selected: [],\n  seatsNumber: 1,\n  seatsTogether: false,\n};\n\nexport const reservationSlice = createSlice({\n  name: 'reservation',\n  initialState,\n  reducers: {\n\n    saveSettings: (state, action) => {\n      state.selected = [];\n      state.seatsNumber = action.payload.seatsNumber;\n      state.seatsTogether = action.payload.seatsTogether;\n    },\n    addSelected: (state, action) => {\n      state.selected = [...state.selected, action.payload];\n    },\n    removeSelected: (state, action) => {\n      state.selected = state.selected.filter(\n        (val) => val.id !== action.payload.id\n      );\n    },\n\n  },\n});\n\nexport const { saveSettings, addSelected, removeSelected } =\n  reservationSlice.actions;\n\nexport const getReservation = (state) => state.reservation;\n\nexport default reservationSlice.reducer;\n","import React, { useState } from 'react';\nimport { Button, Col, Container, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getReservation, saveSettings } from './reservationSlice';\n\nimport { useHistory } from 'react-router';\n\nexport function Main() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const reservation = useSelector(getReservation);\n\n  const [seatsNumber, setSeatsNumber] = useState(reservation.seatsNumber);\n  const [seatsTogether, setSeatsTogether] = useState(reservation.seatsTogether);\n\n  const onSeatsNumberChanged = (event) => setSeatsNumber(event.target.value);\n  const onSeatsTogetherChanged = (event) =>\n    setSeatsTogether(event.target.checked);\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    if (seatsNumber) {\n      dispatch(saveSettings({ seatsNumber, seatsTogether }));\n      history.push('/reservation');\n    }\n  };\n\n  return (\n    <Container\n      className={`d-flex min-vh-100 justify-content-center align-items-center`}\n    >\n      <Form onSubmit={onSubmit}>\n        <Form.Group as={Form.Row} controlId=\"seatsNumber\">\n          <Form.Label column>Liczba miejsc:</Form.Label>\n          <Col>\n            <Form.Control\n              value={seatsNumber}\n              onChange={onSeatsNumberChanged}\n              required\n              type=\"number\"\n              min=\"1\"\n            />\n          </Col>\n        </Form.Group>\n        <Form.Check\n          custom\n          name=\"isNextSeat\"\n          className=\"mb-3\"\n          id=\"isNextSeat\"\n          checked={seatsTogether}\n          onChange={onSeatsTogetherChanged}\n          label=\"Czy miejsca mają być obok siebie?\"\n        />\n        <Button block type=\"submit\" variant=\"outline-primary\">\n          Wybierz miejsca\n        </Button>\n      </Form>\n    </Container>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addSelected,\n  getReservation,\n  removeSelected,\n} from './reservationSlice';\n\nimport styles from './Seat.module.scss';\n\nconst check = (reservation, seat) =>\n  reservation.selected.some(\n    (reserved) =>\n      seat.cords?.x === reserved.cords?.x && seat.cords?.y === reserved.cords?.y\n  );\n\nexport const Seat = ({ seat, selected, onClick }) => {\n  const dispatch = useDispatch();\n  const reservation = useSelector(getReservation);\n  const [checked, setChecked] = useState(seat && check(reservation, seat));\n\n  useEffect(() => {\n    setChecked(seat && check(reservation, seat));\n  }, [reservation, seat]);\n\n  const onCheck = () => {\n    onClick();\n    if (!checked) {\n      if (reservation.selected.length < reservation.seatsNumber) {\n        setChecked(true);\n        dispatch(addSelected(seat));\n      } else {\n          dispatch(removeSelected(reservation.selected[0]));\n          dispatch(addSelected(seat))\n      }\n    } else {\n      setChecked(false);\n      dispatch(removeSelected(seat));\n    }\n  };\n\n  return (\n    <div className={styles.space}>\n      {seat && (\n        <div\n          className={`${styles.seat} ${seat.reserved ? styles.reserved : ''} ${\n            selected || checked ? styles.selected : ''\n          } ${!seat.id ? styles.legend : ''}`}\n          onClick={() => !seat.reserved && seat.id && onCheck()}\n        ></div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport useFetch from 'react-fetch-hook';\nimport { Button, Col, Container, Row } from 'react-bootstrap';\n\nimport { addSelected, getReservation } from './reservationSlice';\nimport { getRandom } from './getRandom';\nimport { Seat } from './Seat';\n\nexport function SeatSelection() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const reservation = useSelector(getReservation);\n  const [touched, setTouched] = useState(false);\n\n  const { isLoading, data } = useFetch(\n    process.env.NODE_ENV === 'development'\n      ? '/seats'\n      : process.env.REACT_APP_SEATS_URL || '/seats'\n  );\n  console.log(data);\n  // Get maximum seat cords\n  const maxX = data?.seats && Math.max(...data?.seats?.map((seat) => seat.cords.x));\n  const maxY = data?.seats && Math.max(...data?.seats?.map((seat) => seat.cords.y));\n\n  // Create empty space array\n  const seats =\n    data?.seats &&\n    [...Array(maxX + 1)].map(() => [...Array(maxY + 1)].map(() => null));\n\n  // Create seats on free space\n  data?.seats &&\n    data.seats.forEach((seat) => {\n      seats[seat.cords.x][seat.cords.y] = seat;\n    });\n\n  // Get random seats array\n  const random = useMemo(\n    () => getRandom(seats, reservation, reservation.seatsTogether),\n    [seats, reservation]\n  );\n\n  // Add random seats to store\n  useEffect(() => {\n    reservation.selected.length === 0 &&\n      !touched &&\n      random?.length > 0 &&\n      random.forEach((seat) => dispatch(addSelected(seat)));\n  }, [dispatch, random, reservation.selected.length, touched]);\n\n  const reserve = () => {\n    reservation.selected.length === parseInt(reservation.seatsNumber, 10) &&\n      history.push('/summary');\n  };\n\n  if (isLoading) {\n    return (\n      <Container\n        className={`d-flex min-vh-100 justify-content-center align-items-center`}\n      >\n        <p>Proszę czekać. Trwa ładowanie danych.</p>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <Row className=\"fit-content\">\n        {seats &&\n          seats.map((row, y) => (\n            <Row noGutters key={y} className=\"flex-nowrap\">\n              {row.map((seat, x) => (\n                <Seat\n                  key={`${x}, ${y}`}\n                  seat={seat}\n                  onClick={() => setTouched(true)}\n                />\n              ))}\n            </Row>\n          ))}\n        <Row noGutters className=\"mt-2 align-items-center w-100\">\n          <Col sm=\"auto\" className=\"d-flex flex-grow-1\">\n            <div className=\"d-flex align-items-center mr-2\">\n              <Seat seat={{}} />\n              <span>Miejsca dostępne</span>\n            </div>\n            <div className=\"d-flex align-items-center mr-2\">\n              <Seat seat={{ reserved: true }} />\n              <span>Miejsca zarezerwowane</span>\n            </div>\n            <div className=\"d-flex align-items-center mr-2\">\n              <Seat seat={{}} selected />\n              <span>Twój wybór</span>\n            </div>\n          </Col>\n          <Col>\n            <Button\n              as=\"input\"\n              type=\"button\"\n              value=\"Rezerwuj\"\n              variant=\"outline-primary\"\n              onClick={() => reserve()}\n            />\n          </Col>\n        </Row>\n      </Row>\n    </>\n  );\n}\n","export function getRandom(seats, reservation, seatsTogether) {\n  if (!seats) return;\n  let availableSeats = [];\n  seats.forEach((row) => {\n    row.forEach((seat, seatIndex) => {\n      if (!seat) {\n        return;\n      }\n\n      if (!seatsTogether) {\n        availableSeats.push(seat);\n      } else {\n        let temp = [];\n\n        for (let index = 0; index < reservation.seatsNumber; index++) {\n          if (row[seatIndex + index]?.id && !row[seatIndex + index]?.reserved) {\n            temp.push(row[seatIndex + index]);\n          } else {\n            temp = [];\n          }\n        }\n\n        temp.length === parseInt(reservation.seatsNumber, 10) &&\n          availableSeats.push(temp);\n      }\n    });\n  });\n\n  if (!seatsTogether) {\n    return availableSeats\n      .sort(() => Math.random() - Math.random())\n      .slice(0, parseInt(reservation.seatsNumber, 10));\n  } else {\n    const random = Math.floor(Math.random() * availableSeats.length);\n    return availableSeats[random];\n  }\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Container } from 'react-bootstrap';\n\nimport { getReservation } from './reservationSlice';\n\nexport function Summary() {\n  const reservation = useSelector(getReservation);\n\n  return (\n    <Container>\n      <h1 className=\"h3 font-weight-bold\">\n        Twoja rezerwacja przebiegła pomyślnie!\n      </h1>\n      <br />\n      <h2 className=\"h4\">Wybrałeś miejsca:</h2>\n      <ul className=\"text-monospace list-dash pl-0\">\n        {reservation.selected.map((seat) => (\n          <li key={seat.id}>\n            rząd x{seat.cords.x}, miejsce y{seat.cords.y} (id{seat.id})\n          </li>\n        ))}\n      </ul>\n      <p className=\"font-weight-bold\">\n        Dziękujemy! W razie problemów prosimy o kontakt z działem administracji.\n      </p>\n    </Container>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport { Main } from './features/reservation/Main';\nimport { SeatSelection } from './features/reservation/SeatSelection';\nimport { Summary } from './features/reservation/Summary';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/reservation\">\n          <SeatSelection />\n        </Route>\n        <Route path=\"/summary\">\n          <Summary />\n        </Route>\n        <Route path=\"/\">\n          <Main />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport reservationReducer from '../features/reservation/reservationSlice';\n\nexport const store = configureStore({\n  reducer: {\n    reservation: reservationReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}